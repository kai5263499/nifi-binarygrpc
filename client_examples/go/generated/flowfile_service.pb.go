// Code generated by protoc-gen-go. DO NOT EDIT.
// source: flowfile_service.proto

package org_apache_nifi_processors_grpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FlowFileReply_ResponseCode int32

const (
	FlowFileReply_ERROR   FlowFileReply_ResponseCode = 0
	FlowFileReply_SUCCESS FlowFileReply_ResponseCode = 1
	FlowFileReply_RETRY   FlowFileReply_ResponseCode = 2
)

var FlowFileReply_ResponseCode_name = map[int32]string{
	0: "ERROR",
	1: "SUCCESS",
	2: "RETRY",
}
var FlowFileReply_ResponseCode_value = map[string]int32{
	"ERROR":   0,
	"SUCCESS": 1,
	"RETRY":   2,
}

func (x FlowFileReply_ResponseCode) String() string {
	return proto.EnumName(FlowFileReply_ResponseCode_name, int32(x))
}
func (FlowFileReply_ResponseCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_flowfile_service_9f0cb2b0038beb3c, []int{1, 0}
}

// The request message
type FlowFileRequest struct {
	// tags 1-15 require one byte to encode and should be left for commonly occurring tags.
	// For that reason, tags 3-14 are left available.
	//
	// source: https://developers.google.com/protocol-buffers/docs/proto3#assigning-tags
	Id                   int64             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Attributes           map[string]string `protobuf:"bytes,15,rep,name=attributes" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Content              []byte            `protobuf:"bytes,16,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *FlowFileRequest) Reset()         { *m = FlowFileRequest{} }
func (m *FlowFileRequest) String() string { return proto.CompactTextString(m) }
func (*FlowFileRequest) ProtoMessage()    {}
func (*FlowFileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_flowfile_service_9f0cb2b0038beb3c, []int{0}
}
func (m *FlowFileRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlowFileRequest.Unmarshal(m, b)
}
func (m *FlowFileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlowFileRequest.Marshal(b, m, deterministic)
}
func (dst *FlowFileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowFileRequest.Merge(dst, src)
}
func (m *FlowFileRequest) XXX_Size() int {
	return xxx_messageInfo_FlowFileRequest.Size(m)
}
func (m *FlowFileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowFileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FlowFileRequest proto.InternalMessageInfo

func (m *FlowFileRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *FlowFileRequest) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *FlowFileRequest) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

// the reply message
type FlowFileReply struct {
	Id                   int64                      `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	ResponseCode         FlowFileReply_ResponseCode `protobuf:"varint,2,opt,name=responseCode,enum=org.apache.nifi.processors.grpc.FlowFileReply_ResponseCode" json:"responseCode,omitempty"`
	Attributes           map[string]string          `protobuf:"bytes,15,rep,name=attributes" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Content              []byte                     `protobuf:"bytes,16,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *FlowFileReply) Reset()         { *m = FlowFileReply{} }
func (m *FlowFileReply) String() string { return proto.CompactTextString(m) }
func (*FlowFileReply) ProtoMessage()    {}
func (*FlowFileReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_flowfile_service_9f0cb2b0038beb3c, []int{1}
}
func (m *FlowFileReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlowFileReply.Unmarshal(m, b)
}
func (m *FlowFileReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlowFileReply.Marshal(b, m, deterministic)
}
func (dst *FlowFileReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowFileReply.Merge(dst, src)
}
func (m *FlowFileReply) XXX_Size() int {
	return xxx_messageInfo_FlowFileReply.Size(m)
}
func (m *FlowFileReply) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowFileReply.DiscardUnknown(m)
}

var xxx_messageInfo_FlowFileReply proto.InternalMessageInfo

func (m *FlowFileReply) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *FlowFileReply) GetResponseCode() FlowFileReply_ResponseCode {
	if m != nil {
		return m.ResponseCode
	}
	return FlowFileReply_ERROR
}

func (m *FlowFileReply) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *FlowFileReply) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func init() {
	proto.RegisterType((*FlowFileRequest)(nil), "org.apache.nifi.processors.grpc.FlowFileRequest")
	proto.RegisterMapType((map[string]string)(nil), "org.apache.nifi.processors.grpc.FlowFileRequest.AttributesEntry")
	proto.RegisterType((*FlowFileReply)(nil), "org.apache.nifi.processors.grpc.FlowFileReply")
	proto.RegisterMapType((map[string]string)(nil), "org.apache.nifi.processors.grpc.FlowFileReply.AttributesEntry")
	proto.RegisterEnum("org.apache.nifi.processors.grpc.FlowFileReply_ResponseCode", FlowFileReply_ResponseCode_name, FlowFileReply_ResponseCode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FlowFileServiceClient is the client API for FlowFileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FlowFileServiceClient interface {
	// Sends a FlowFile (blocking rpc)
	Send(ctx context.Context, in *FlowFileRequest, opts ...grpc.CallOption) (*FlowFileReply, error)
}

type flowFileServiceClient struct {
	cc *grpc.ClientConn
}

func NewFlowFileServiceClient(cc *grpc.ClientConn) FlowFileServiceClient {
	return &flowFileServiceClient{cc}
}

func (c *flowFileServiceClient) Send(ctx context.Context, in *FlowFileRequest, opts ...grpc.CallOption) (*FlowFileReply, error) {
	out := new(FlowFileReply)
	err := c.cc.Invoke(ctx, "/org.apache.nifi.processors.grpc.FlowFileService/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlowFileServiceServer is the server API for FlowFileService service.
type FlowFileServiceServer interface {
	// Sends a FlowFile (blocking rpc)
	Send(context.Context, *FlowFileRequest) (*FlowFileReply, error)
}

func RegisterFlowFileServiceServer(s *grpc.Server, srv FlowFileServiceServer) {
	s.RegisterService(&_FlowFileService_serviceDesc, srv)
}

func _FlowFileService_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlowFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowFileServiceServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.apache.nifi.processors.grpc.FlowFileService/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowFileServiceServer).Send(ctx, req.(*FlowFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FlowFileService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "org.apache.nifi.processors.grpc.FlowFileService",
	HandlerType: (*FlowFileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _FlowFileService_Send_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flowfile_service.proto",
}

func init() {
	proto.RegisterFile("flowfile_service.proto", fileDescriptor_flowfile_service_9f0cb2b0038beb3c)
}

var fileDescriptor_flowfile_service_9f0cb2b0038beb3c = []byte{
	// 376 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x93, 0x41, 0x8f, 0xd2, 0x40,
	0x14, 0xc7, 0x69, 0x2b, 0x22, 0x0f, 0x84, 0x66, 0x62, 0x4c, 0xc3, 0x41, 0x09, 0x27, 0x4e, 0x13,
	0xad, 0x17, 0xa3, 0xd1, 0x28, 0xa4, 0xbd, 0x4a, 0xa6, 0x7a, 0xf0, 0x22, 0x96, 0xf6, 0x81, 0xa3,
	0x65, 0xa6, 0xce, 0x0c, 0x90, 0x1e, 0xf6, 0xcb, 0xec, 0xe7, 0xda, 0x8f, 0xb0, 0x1f, 0x62, 0xd3,
	0x92, 0x5d, 0x58, 0x76, 0x93, 0x4d, 0x4f, 0x7b, 0xeb, 0xfb, 0xa7, 0xf3, 0xcb, 0xfb, 0xff, 0xf3,
	0x7f, 0xf0, 0x72, 0x99, 0xc9, 0xdd, 0x92, 0x67, 0x38, 0xd7, 0xa8, 0xb6, 0x3c, 0x41, 0x9a, 0x2b,
	0x69, 0x24, 0x79, 0x2d, 0xd5, 0x8a, 0xc6, 0x79, 0x9c, 0xfc, 0x41, 0x2a, 0xf8, 0x92, 0x97, 0x72,
	0x82, 0x5a, 0x4b, 0xa5, 0xe9, 0x4a, 0xe5, 0xc9, 0xe8, 0xc2, 0x82, 0x7e, 0x98, 0xc9, 0x5d, 0xc8,
	0x33, 0x64, 0xf8, 0x7f, 0x83, 0xda, 0x90, 0x1e, 0xd8, 0x3c, 0xf5, 0xac, 0xa1, 0x35, 0x76, 0x98,
	0xcd, 0x53, 0xf2, 0x1b, 0x20, 0x36, 0x46, 0xf1, 0xc5, 0xc6, 0xa0, 0xf6, 0xfa, 0x43, 0x67, 0xdc,
	0xf1, 0xbf, 0xd0, 0x07, 0xc8, 0xf4, 0x84, 0x4a, 0xbf, 0xde, 0x20, 0x02, 0x61, 0x54, 0xc1, 0x8e,
	0x98, 0xc4, 0x83, 0x56, 0x22, 0x85, 0x41, 0x61, 0x3c, 0x77, 0x68, 0x8d, 0xbb, 0xec, 0x7a, 0x1c,
	0x7c, 0x82, 0xfe, 0xc9, 0x43, 0xe2, 0x82, 0xf3, 0x0f, 0x8b, 0x6a, 0xbf, 0x36, 0x2b, 0x3f, 0xc9,
	0x0b, 0x68, 0x6e, 0xe3, 0x6c, 0x83, 0x9e, 0x5d, 0x69, 0xfb, 0xe1, 0x83, 0xfd, 0xde, 0x1a, 0x5d,
	0xda, 0xf0, 0xfc, 0xb0, 0x48, 0x9e, 0x15, 0x77, 0xcc, 0xcd, 0xa1, 0xab, 0x50, 0xe7, 0x52, 0x68,
	0x9c, 0xca, 0x74, 0x8f, 0xe8, 0xf9, 0x1f, 0x6b, 0xd8, 0xcb, 0xb3, 0x82, 0xb2, 0x23, 0x04, 0xbb,
	0x05, 0x24, 0xbf, 0xee, 0x49, 0xef, 0x73, 0x4d, 0xfc, 0xa3, 0x64, 0xf7, 0x16, 0xba, 0xc7, 0xb6,
	0x48, 0x1b, 0x9a, 0x01, 0x63, 0xdf, 0x98, 0xdb, 0x20, 0x1d, 0x68, 0x45, 0x3f, 0xa6, 0xd3, 0x20,
	0x8a, 0x5c, 0xab, 0xd4, 0x59, 0xf0, 0x9d, 0xfd, 0x74, 0x6d, 0xff, 0xec, 0x50, 0xa6, 0x68, 0xdf,
	0x43, 0xf2, 0x17, 0x9e, 0x44, 0x28, 0x52, 0xf2, 0xa6, 0x6e, 0x61, 0x06, 0xb4, 0x5e, 0x48, 0xa3,
	0xc6, 0xc4, 0x87, 0x57, 0x89, 0x5c, 0xd3, 0x75, 0x2c, 0x76, 0x48, 0x17, 0x5c, 0xc4, 0xaa, 0xa8,
	0xfe, 0x5b, 0xa1, 0x40, 0x15, 0x1b, 0x4c, 0x27, 0xcf, 0xc2, 0x30, 0x9a, 0x95, 0x97, 0x31, 0xb3,
	0xce, 0x6d, 0x27, 0x0c, 0xa3, 0xc5, 0xd3, 0xea, 0x50, 0xde, 0x5d, 0x05, 0x00, 0x00, 0xff, 0xff,
	0x88, 0xd5, 0x6e, 0x69, 0x42, 0x03, 0x00, 0x00,
}
